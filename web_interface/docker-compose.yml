# Docker Compose for REVENG Web Interface
# ========================================
# 
# Multi-container setup for development and production deployment

version: '3.8'

services:
  # MongoDB database
  mongodb:
    image: mongo:6.0
    container_name: reveng-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-reveng}
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - reveng-network

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: reveng-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - reveng-network

  # Backend API server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: reveng-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DATABASE:-reveng}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
      PYTHON_PATH: ${PYTHON_PATH:-python3}
      ANALYZER_PATH: ${ANALYZER_PATH:-/app/tools/ai_enhanced_analyzer.py}
    volumes:
      - ./uploads:/app/uploads
      - ./reports:/app/reports
      - ./temp:/app/temp
      - ./logs:/app/logs
      - ../tools:/app/tools:ro
      - ../reveng_analyzer.py:/app/reveng_analyzer.py:ro
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    networks:
      - reveng-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_SERVER_URL: ${REACT_APP_SERVER_URL:-http://localhost:5000}
    container_name: reveng-frontend
    restart: unless-stopped
    environment:
      REACT_APP_SERVER_URL: ${REACT_APP_SERVER_URL:-http://localhost:5000}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - reveng-network

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: reveng-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - reveng-network
    profiles:
      - production

  # Analysis worker (for scaling analysis processing)
  analysis-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/${MONGO_DATABASE:-reveng}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      PYTHON_PATH: ${PYTHON_PATH:-python3}
      ANALYZER_PATH: ${ANALYZER_PATH:-/app/tools/ai_enhanced_analyzer.py}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-2}
    volumes:
      - ./uploads:/app/uploads
      - ./reports:/app/reports
      - ./temp:/app/temp
      - ./logs:/app/logs
      - ../tools:/app/tools:ro
      - ../reveng_analyzer.py:/app/reveng_analyzer.py:ro
    depends_on:
      - mongodb
      - redis
    networks:
      - reveng-network
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  reveng-network:
    driver: bridge