#!/usr/bin/env python3
"""
REVENG Export Formats
======================

Export REVENG analysis results to various reverse engineering tool formats:
- IDA Pro (.idb, .i64) - Python scripts for IDA
- Ghidra (.gzf) - Ghidra project import scripts
- Radare2 (.r2) - r2 commands for annotation
- Binary Ninja (.bndb) - Binary Ninja scripts
- JSON (universal) - Structured data export

This allows importing REVENG findings into other tools for further analysis.
"""

import json
import logging
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime

logger = logging.getLogger(__name__)


class ExportFormats:
    """Export analysis to multiple formats"""

    def __init__(self, analysis_folder: Path):
        """
        Initialize exporter

        Args:
            analysis_folder: Path to REVENG analysis folder
        """
        self.analysis_folder = Path(analysis_folder)
        self.analysis_data = self._load_analysis()

    def _load_analysis(self) -> Dict:
        """Load analysis data from folder"""
        data = {
            'functions': [],
            'strings': [],
            'imports': [],
            'exports': [],
            'sections': [],
            'comments': []
        }

        # Try to load analysis report
        report_path = self.analysis_folder / "universal_analysis_report.json"
        if report_path.exists():
            with open(report_path, 'r', encoding='utf-8') as f:
                data['report'] = json.load(f)

        # Try to load function specifications
        specs_path = self.analysis_folder.parent / "SPECS"
        if specs_path.exists():
            for spec_file in specs_path.glob("*.json"):
                with open(spec_file, 'r', encoding='utf-8') as f:
                    spec = json.load(f)
                    if 'functions' in spec:
                        data['functions'].extend(spec['functions'])

        return data

    def export_ida_python(self, output_path: Path) -> bool:
        """
        Export as IDA Pro Python script

        The script can be run in IDA to import function names,
        comments, and other analysis results.
        """
        try:
            script = self._generate_ida_script()

            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(script)

            logger.info(f"IDA Python script exported to {output_path}")
            return True

        except Exception as e:
            logger.error(f"IDA export failed: {e}")
            return False

    def _generate_ida_script(self) -> str:
        """Generate IDA Python script"""
        script = '''"""
REVENG Analysis Import Script for IDA Pro
==========================================

Generated by REVENG on {timestamp}

Usage:
1. Open target binary in IDA Pro
2. File -> Script file -> Select this file
3. Script will import function names and comments
"""

import idaapi
import idc
import idautils

def apply_reveng_analysis():
    """Apply REVENG analysis to current IDB"""

    print("=" * 70)
    print("REVENG Analysis Import")
    print("=" * 70)

    # Function data
    functions = {functions_json}

    # Apply function names
    renamed_count = 0
    for func in functions:
        if 'name' in func and 'address' in func:
            addr = int(func['address'], 16) if isinstance(func['address'], str) else func['address']

            # Check if address is valid
            if idc.get_func_attr(addr, idc.FUNCATTR_START) != idc.BADADDR:
                old_name = idc.get_func_name(addr)
                new_name = func['name']

                if old_name != new_name:
                    if idc.set_name(addr, new_name, idc.SN_NOWARN):
                        renamed_count += 1
                        print(f"Renamed: {{old_name}} -> {{new_name}} @ {{hex(addr)}}")

                # Add comment if available
                if 'purpose' in func:
                    idc.set_func_cmt(addr, func['purpose'], 0)

    print()
    print(f"Functions renamed: {{renamed_count}}")
    print("=" * 70)
    print("Import complete!")

    # Refresh UI
    idaapi.refresh_idaview_anyway()

if __name__ == "__main__":
    apply_reveng_analysis()
'''.format(
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            functions_json=json.dumps(self.analysis_data.get('functions', []), indent=4)
        )

        return script

    def export_ghidra_script(self, output_path: Path) -> bool:
        """
        Export as Ghidra Python script

        The script can be run in Ghidra to import function names and comments.
        """
        try:
            script = self._generate_ghidra_script()

            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(script)

            logger.info(f"Ghidra script exported to {output_path}")
            return True

        except Exception as e:
            logger.error(f"Ghidra export failed: {e}")
            return False

    def _generate_ghidra_script(self) -> str:
        """Generate Ghidra Python script"""
        script = '''"""
REVENG Analysis Import Script for Ghidra
=========================================

Generated by REVENG on {timestamp}

Usage:
1. Open target binary in Ghidra
2. Window -> Script Manager
3. Right-click in script list -> New Script
4. Paste this script and save
5. Run the script
"""

from ghidra.program.model.symbol import SourceType
from ghidra.program.model.listing import CodeUnit

def apply_reveng_analysis():
    """Apply REVENG analysis to current program"""

    print("=" * 70)
    print("REVENG Analysis Import")
    print("=" * 70)

    # Get current program
    program = getCurrentProgram()
    function_manager = program.getFunctionManager()
    listing = program.getListing()

    # Function data
    functions = {functions_json}

    # Start transaction
    transaction_id = program.startTransaction("REVENG Import")

    try:
        renamed_count = 0

        for func_data in functions:
            if 'name' in func_data and 'address' in func_data:
                # Parse address
                addr_str = func_data['address']
                if isinstance(addr_str, str):
                    if addr_str.startswith('0x'):
                        addr_value = int(addr_str, 16)
                    else:
                        addr_value = int(addr_str)
                else:
                    addr_value = addr_str

                # Get address object
                addr = toAddr(addr_value)

                # Get function at address
                func = function_manager.getFunctionAt(addr)

                if func is not None:
                    old_name = func.getName()
                    new_name = func_data['name']

                    # Rename function
                    if old_name != new_name:
                        func.setName(new_name, SourceType.USER_DEFINED)
                        renamed_count += 1
                        print("Renamed: %s -> %s @ %s" % (old_name, new_name, hex(addr_value)))

                    # Add comment
                    if 'purpose' in func_data:
                        listing.setComment(addr, CodeUnit.PLATE_COMMENT, func_data['purpose'])

        print()
        print("Functions renamed: %d" % renamed_count)
        print("=" * 70)
        print("Import complete!")

        program.endTransaction(transaction_id, True)

    except Exception as e:
        print("Error during import: %s" % str(e))
        program.endTransaction(transaction_id, False)
        raise

if __name__ == "__main__":
    apply_reveng_analysis()
'''.format(
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            functions_json=json.dumps(self.analysis_data.get('functions', []), indent=4)
        )

        return script

    def export_radare2_script(self, output_path: Path) -> bool:
        """
        Export as Radare2 command script

        The script can be run with: r2 -i script.r2 binary
        """
        try:
            script = self._generate_radare2_script()

            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(script)

            logger.info(f"Radare2 script exported to {output_path}")
            return True

        except Exception as e:
            logger.error(f"Radare2 export failed: {e}")
            return False

    def _generate_radare2_script(self) -> str:
        """Generate Radare2 command script"""
        commands = [
            "# REVENG Analysis Import Script for Radare2",
            f"# Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "#",
            "# Usage: r2 -i script.r2 binary",
            "",
            "e asm.bytes=false",
            "e asm.comments=true",
            ""
        ]

        # Add function renaming commands
        for func in self.analysis_data.get('functions', []):
            if 'name' in func and 'address' in func:
                addr = func['address']
                name = func['name']

                commands.append(f"afn {name} @ {addr}")

                # Add comment
                if 'purpose' in func:
                    purpose = func['purpose'].replace('"', '\\"')
                    commands.append(f'CC {purpose} @ {addr}')

        commands.extend([
            "",
            "# Analysis complete",
            "echo REVENG import complete",
            ""
        ])

        return '\n'.join(commands)

    def export_binary_ninja_script(self, output_path: Path) -> bool:
        """
        Export as Binary Ninja Python script

        The script can be run via Tools -> Python Console in Binary Ninja.
        """
        try:
            script = self._generate_binary_ninja_script()

            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(script)

            logger.info(f"Binary Ninja script exported to {output_path}")
            return True

        except Exception as e:
            logger.error(f"Binary Ninja export failed: {e}")
            return False

    def _generate_binary_ninja_script(self) -> str:
        """Generate Binary Ninja Python script"""
        script = '''"""
REVENG Analysis Import Script for Binary Ninja
===============================================

Generated by REVENG on {timestamp}

Usage:
1. Open target binary in Binary Ninja
2. Tools -> Python Console
3. Run: exec(open('this_script.py').read())
"""

import json

def apply_reveng_analysis(bv):
    """Apply REVENG analysis to current binary view"""

    print("=" * 70)
    print("REVENG Analysis Import")
    print("=" * 70)

    # Function data
    functions_data = {functions_json}

    renamed_count = 0

    for func_data in functions_data:
        if 'name' in func_data and 'address' in func_data:
            # Parse address
            addr_str = func_data['address']
            if isinstance(addr_str, str):
                if addr_str.startswith('0x'):
                    addr = int(addr_str, 16)
                else:
                    addr = int(addr_str)
            else:
                addr = addr_str

            # Get function at address
            func = bv.get_function_at(addr)

            if func is not None:
                old_name = func.name
                new_name = func_data['name']

                # Rename function
                if old_name != new_name:
                    func.name = new_name
                    renamed_count += 1
                    print(f"Renamed: {{old_name}} -> {{new_name}} @ {{hex(addr)}}")

                # Add comment
                if 'purpose' in func_data:
                    func.comment = func_data['purpose']

    print()
    print(f"Functions renamed: {{renamed_count}}")
    print("=" * 70)
    print("Import complete!")

# Apply to current binary view
apply_reveng_analysis(bv)
'''.format(
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            functions_json=json.dumps(self.analysis_data.get('functions', []), indent=4)
        )

        return script

    def export_json(self, output_path: Path) -> bool:
        """
        Export as universal JSON format

        Can be imported by custom tools or scripts.
        """
        try:
            export_data = {
                'metadata': {
                    'tool': 'REVENG',
                    'version': '1.0',
                    'exported': datetime.now().isoformat(),
                    'analysis_folder': str(self.analysis_folder)
                },
                'analysis': self.analysis_data
            }

            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2)

            logger.info(f"JSON export saved to {output_path}")
            return True

        except Exception as e:
            logger.error(f"JSON export failed: {e}")
            return False

    def export_all(self, output_dir: Path) -> Dict[str, bool]:
        """
        Export to all formats

        Args:
            output_dir: Directory for export files

        Returns:
            Dict mapping format names to success status
        """
        output_dir = Path(output_dir)
        output_dir.mkdir(exist_ok=True, parents=True)

        results = {}

        # IDA Pro
        results['ida'] = self.export_ida_python(
            output_dir / "reveng_import_ida.py"
        )

        # Ghidra
        results['ghidra'] = self.export_ghidra_script(
            output_dir / "reveng_import_ghidra.py"
        )

        # Radare2
        results['radare2'] = self.export_radare2_script(
            output_dir / "reveng_import.r2"
        )

        # Binary Ninja
        results['binary_ninja'] = self.export_binary_ninja_script(
            output_dir / "reveng_import_binja.py"
        )

        # JSON
        results['json'] = self.export_json(
            output_dir / "reveng_export.json"
        )

        return results


# Example usage
if __name__ == "__main__":
    import sys

    logging.basicConfig(level=logging.INFO)

    print("=" * 70)
    print("REVENG EXPORT FORMATS")
    print("=" * 70)
    print()

    if len(sys.argv) >= 2:
        analysis_folder = Path(sys.argv[1])

        if not analysis_folder.exists():
            print(f"Error: Analysis folder not found: {analysis_folder}")
            sys.exit(1)

        exporter = ExportFormats(analysis_folder)

        # Export to all formats
        output_dir = analysis_folder / "exports"
        print(f"Exporting to: {output_dir}")
        print()

        results = exporter.export_all(output_dir)

        # Print results
        print("Export Results:")
        print("-" * 70)
        for format_name, success in results.items():
            status = "✓ SUCCESS" if success else "✗ FAILED"
            print(f"  {format_name:15s} {status}")

        print()
        print(f"Exported files saved to: {output_dir}")

    else:
        print("Usage:")
        print("  python export_formats.py <analysis_folder>")
        print()
        print("Example:")
        print("  python export_formats.py analysis_droid")
        print()
        print("Output formats:")
        print("  - IDA Pro:      reveng_import_ida.py")
        print("  - Ghidra:       reveng_import_ghidra.py")
        print("  - Radare2:      reveng_import.r2")
        print("  - Binary Ninja: reveng_import_binja.py")
        print("  - JSON:         reveng_export.json")

    print("=" * 70)
