# REVENG Java Bytecode Analysis Dependencies
# ==========================================
# This file contains dependencies for Java bytecode analysis support.
# Install with: pip install -r requirements-java.txt

# =============================================================================
# CORE DEPENDENCIES (from base requirements.txt)
# =============================================================================

# HTTP client for API calls
requests>=2.28.1

# Ghidra MCP integration
ghidramcp>=0.1.0

# Binary manipulation
lief>=0.13.0
keystone-engine>=0.9.2
capstone>=5.0.0

# Visualization and analysis
networkx>=3.0
pydot>=1.4.2
tqdm>=4.64.0
pyyaml>=6.0

# =============================================================================
# JAVA-SPECIFIC DEPENDENCIES
# =============================================================================

# Java-Python bridge for calling Java code from Python
py4j>=0.10.9.7

# AST manipulation (useful for comparing decompiled output)
astor>=0.8.1

# Colored terminal output
colorama>=0.4.6

# Rich text formatting for terminal
rich>=13.0.0

# =============================================================================
# TESTING DEPENDENCIES
# =============================================================================

# Testing framework
pytest>=7.4.0

# Timeout support for tests
pytest-timeout>=2.1.0

# =============================================================================
# JAVA DECOMPILERS (Manual Installation Required)
# =============================================================================

# Note: Java decompilers are separate tools that must be downloaded manually:
# - CFR: https://github.com/leibnitz27/cfr (recommended)
# - Fernflower: https://github.com/fesh0r/fernflower
# - Procyon: https://github.com/mstrobel/procyon

# System Requirements (must be installed separately):
# ====================================================
# 1. Java Development Kit (JDK) 11 or later
#    - Download: https://adoptium.net/
#    - Ensure 'java' and 'javac' are in PATH
#
# 2. Java decompilers (choose at least one):
#    a) CFR (recommended for most cases)
#       - Download: https://github.com/leibnitz27/cfr/releases
#       - Place cfr-*.jar in tools/decompilers/
#
#    b) Fernflower (included with IntelliJ IDEA)
#       - Download: https://github.com/fesh0r/fernflower/releases
#       - Place fernflower.jar in tools/decompilers/
#
#    c) Procyon (good for newer Java versions)
#       - Download: https://github.com/mstrobel/procyon/releases
#       - Place procyon-decompiler.jar in tools/decompilers/
#
# 3. Optional: jadx (Android/Java decompiler)
#    - Download: https://github.com/skylot/jadx/releases
#    - Useful for Android APK analysis

# Directory structure for decompilers:
# =====================================
# tools/
#   decompilers/
#     cfr-0.152.jar
#     fernflower.jar
#     procyon-decompiler.jar
#     README.md  # Instructions for downloading

# Quick Setup:
# ============
# 1. Install Python dependencies:
#    pip install -r requirements-java.txt
#
# 2. Install Java (if not already installed):
#    # Windows: Download from https://adoptium.net/
#    # Linux: sudo apt install openjdk-11-jdk
#    # macOS: brew install openjdk@11
#
# 3. Verify Java installation:
#    java -version
#
# 4. Download at least one decompiler (CFR recommended):
#    mkdir -p tools/decompilers
#    cd tools/decompilers
#    wget https://github.com/leibnitz27/cfr/releases/download/0.152/cfr-0.152.jar
#
# 5. Test Java analysis:
#    python tools/java_bytecode_analyzer.py <your-jar-file>

# Performance Optimization:
# =========================
# For large JAR files, consider:
# - Increasing JVM heap size: export JAVA_OPTS="-Xmx4g"
# - Using parallel processing (already implemented in analyzer)
# - Enabling decompiler caching

# Troubleshooting:
# ================
# - "java: command not found" → Install JDK and add to PATH
# - "Decompiler not found" → Download JAR files to tools/decompilers/
# - "OutOfMemoryError" → Increase JVM heap size with JAVA_OPTS
# - "Py4J connection error" → Ensure Java process is running
